<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.github.francis-pang</groupId>
  <artifactId>expense-tally-aws</artifactId>
  <version>1-SNAPSHOT</version>
  <packaging>jar</packaging>
  <properties>
    <javaVersion>11</javaVersion>
    <javaCompilerVersion>1.11</javaCompilerVersion>
    <sonar.host.url>https://sonarcloud.io</sonar.host.url>
    <sonar.projectKey>francis-pang_expense-tally-aws</sonar.projectKey>
    <sonar.moduleKey>${project.groupId}:${project.artifactId}</sonar.moduleKey>
    <sonar.organization>boyshawn-github</sonar.organization>
    <maven.developmentVersion>0-SNAPSHOT</maven.developmentVersion>
    <!--Prevent "File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!"
    This warning is emitted by a plugin that processes plain text files but has not been configured to use a
    specific file encoding. -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <!-- Application information -->
  <name>${project.groupId}:${project.artifactId}</name>
  <description>
    Expense Tally is an application which tallies the transaction history from Singapore banks against the records
    download from Expense Manager database.
  </description>
  <url>https://github.com/francis-pang/expense-tally-aws</url>

  <!--Source control management information-->
  <scm>
    <connection>scm:git:git@github.com:francis-pang/expense-tally-aws.git</connection>
    <developerConnection>scm:git:https://github.com/francis-pang/expense-tally-aws.git</developerConnection>
    <url>https://github.com/francis-pang/expense-tally-aws</url>
    <tag>HEAD</tag>
  </scm>

  <!-- Development team information -->
  <developers>
    <developer>
      <name>Francis Pang</name>
      <email>boyshawn@hotmail.com</email>
      <organizationUrl>https://www.linkedin.com/in/francispangdexian/</organizationUrl>
    </developer>
  </developers>

  <dependencies>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-lambda-java-core</artifactId>
      <version>1.2.1</version>
    </dependency>
    <!-- Used to read lambda event -->
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-lambda-java-events</artifactId>
      <version>3.11.0</version>
    </dependency>
    <!-- Used to extract and update S3 file -->
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-java-sdk-s3</artifactId>
      <version>1.12.253</version>
    </dependency>
    <!-- Need this so that lambda log will be shown in CloudWatch -->
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-lambda-java-log4j2</artifactId>
      <version>1.5.1</version>
      <exclusions>
        <exclusion>
          <groupId>org.apache.logging.log4j</groupId>
          <artifactId>log4j-core</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.apache.logging.log4j</groupId>
          <artifactId>log4j-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- log4j2 logging-->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>2.18.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
      <version>2.18.0</version>
    </dependency>
    <!-- used to perform serialisation -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.13.4.2</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-modules-java8</artifactId>
      <version>2.13.3</version>
      <type>pom</type>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-joda</artifactId>
      <version>2.13.3</version>
    </dependency>
    <!-- Need to read the database-->
    <dependency>
      <groupId>com.github.francis-pang</groupId>
      <artifactId>expense-tally-expense-manager</artifactId>
      <version>75</version>
    </dependency>
    <dependency>
      <groupId>com.github.francis-pang</groupId>
      <artifactId>expense-tally-reconciliator</artifactId>
      <version>75</version>
    </dependency>
    <dependency>
      <groupId>com.github.francis-pang</groupId>
      <artifactId>expense-tally-csv-parser</artifactId>
      <version>75</version>
    </dependency>
    <!-- Testing -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>5.9.0-M1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>4.6.1</version>
      <scope>test</scope>
    </dependency>
    <!-- This allows us to mock final class-->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-inline</artifactId>
      <version>4.6.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>3.23.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Need this to specify the compiler argument -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <release>${javaVersion}</release>
          <source>${javaCompilerVersion}</source>
          <target>${javaCompilerVersion}</target>
          <compilerArgument>-Xlint:all</compilerArgument>
          <showWarnings>true</showWarnings>
          <showDeprecation>true</showDeprecation>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <version>3.1.0</version>
      </plugin>
      <!-- Used for executing test-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M5</version>
        <configuration>
          <excludes>
            <exclude>some test to exclude here</exclude>
          </excludes>
        </configuration>
      </plugin>
      <!-- Used for configure Junit test -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.0.0-M5</version>
        <configuration>
          <properties>
            <configurationParameters>
              junit.jupiter.conditions.deactivate = *
              junit.jupiter.extensions.autodetection.enabled = true
              junit.jupiter.testinstance.lifecycle.default = per_class
              junit.jupiter.execution.parallel.enabled = true
            </configurationParameters>
          </properties>
        </configuration>
      </plugin>
      <!-- testing code coverage -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.6</version>
        <configuration>
          <excludes>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>during-test-report</id>
            <!-- The default is package, I change this so that the report is generated during test phase -->
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
          <execution>
            <id>default-check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <rules>
                <rule />
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Sonarqube plugin -->
      <plugin>
        <groupId>org.sonarsource.scanner.maven</groupId>
        <artifactId>sonar-maven-plugin</artifactId>
        <version>3.7.0.1746</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.2.4</version>
        <configuration>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
